pipeline {
    agent { label 'sds-builder-2204' }

    environment {
        ARTIFACTORY_PASS = credentials('ARTIFACTORY_PASS')
        CONAN_USER = 'oss'
        STABLE_BRANCH = 'stable/v*'
    }

    stages {
        stage('Get Version') {
            steps {
                script {
                    PROJECT = sh(script: "grep -m 1 'name =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    VER = sh(script: "grep -m 1 'version =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    CONAN_CHANNEL = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    SANITIZED_BRANCH = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    slackSend color: '#0063D1', channel: '#sds-ci', message: "*${PROJECT}/${SANITIZED_BRANCH}* is building."
                }
            }
        }

        stage('Build') {
            failFast true
            matrix {
                agent { label 'sds-builder-2204' }
                axes {
                    axis {
                        name 'BUILD_TYPE'
                        values 'sanitize', 'release', 'debug'
                    }
                }

                stages {
                    stage("Refresh Locks") {
                        when { not {
                            branch "${STABLE_BRANCH}"
                        } }
                        steps {
                            script {
                                sh "./update_locks.sh"
                            }
                        }
                    }

                    stage("Build") {
                        steps {
                            script {
                                sh "conan create --lockfile locks/${BUILD_TYPE}_deps.lock ."
                            }
                        }
                    }

                    stage("Deploy Package") {
                        when { allOf {
                            branch "${STABLE_BRANCH}"
                                expression { "${BUILD_TYPE}" != 'coverage' }
                            expression { "${BUILD_TYPE}" != 'sanitize' }
                        } }
                        steps {
                            sh "conan user -r ebay-local -p ${ARTIFACTORY_PASS} _service_sds"
                                sh "conan upload ${PROJECT}/${VER}@ -c --all -r ebay-local"
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            slackSend color: '#E43237', channel: '#${PROJECT}-build', message: "@here ${PROJECT} build *${PROJECT}/${SANITIZED_BRANCH}* has had a failure : ${BUILD_URL}"
        }
        success {
            slackSend color: '#85B717', channel: '#sds-ci', message: "*${PROJECT}/${SANITIZED_BRANCH}* has completed successfully."
        }
    }
}
